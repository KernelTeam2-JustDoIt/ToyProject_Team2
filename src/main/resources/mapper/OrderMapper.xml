<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.team2.mapper.OrderMapper">

    <!-- Order 기본정보 저장 -->
    <insert id="insertOrder" parameterType="com.team2.dto.order.OrderDTO" useGeneratedKeys="true" keyProperty="orderId">
        INSERT INTO orders (customer_id, total_price, status, order_date)
        VALUES (#{customerId}, #{totalPrice}, #{status}, NOW())
    </insert>

    <!-- OrderItem 저장 -->
    <insert id="insertOrderItem" parameterType="com.team2.dto.order.OrderItemDTO" useGeneratedKeys="true" keyProperty="itemId">
        INSERT INTO order_items (order_id, accomm_id, room_name, price, quantity)
        VALUES (#{orderId}, #{accommId}, #{roomName}, #{price}, #{quantity})
    </insert>

    <!-- 고객 ID 로 주문 목록 -->
    <select id="selectOrdersByCustomerId" parameterType="int" resultType="com.team2.dto.order.OrderDTO">
        SELECT order_id AS orderId,
               customer_id AS customerId,
               total_price AS totalPrice,
               status,
               order_date AS orderDate
        FROM orders
        WHERE customer_id = #{customerId}
        ORDER BY order_date DESC
    </select>

    <!-- 주문 단건 -->
    <select id="selectOrderById" parameterType="int" resultType="com.team2.dto.order.OrderDTO">
        SELECT order_id AS orderId,
               customer_id AS customerId,
               total_price AS totalPrice,
               status,
               order_date AS orderDate
        FROM orders
        WHERE order_id = #{orderId}
    </select>

    <!-- 주문의 아이템 목록 -->
    <select id="selectOrderItems" parameterType="int" resultType="com.team2.dto.order.OrderItemDTO">
        SELECT oi.item_id AS itemId,
               oi.order_id AS orderId,
               CASE 
                   WHEN r.accommodation_id IS NOT NULL THEN r.accommodation_id
                   ELSE oi.accomm_id
               END AS accommId,
               oi.room_name AS roomName,
               oi.price,
               oi.quantity,
               r.accommodation_id AS accommodationId,
               a.accommodation_name AS accommodationName,
               res.check_in_at AS checkInAt,
               res.check_out_date AS checkOutDate,
               res.reserve_id AS reserveId
        FROM order_items oi
        LEFT JOIN room r ON oi.accomm_id = r.room_id
        LEFT JOIN accommodation a ON r.accommodation_id = a.accommodation_id
        LEFT JOIN reserve res ON r.room_id = res.room_id 
               AND EXISTS (
                   SELECT 1 FROM payment p 
                   WHERE p.reserve_id = res.reserve_id 
                   AND p.price = oi.price
               )
        WHERE oi.order_id = #{orderId}
    </select>

</mapper> 